import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import math
from scipy.optimize import curve_fit

def saturating_exponential(t, A, k, t0, C):
    """
    Models a curve that rises and flattens out.
    - A: Amplitude (total rise)
    - k: Rate constant (steepness)
    - t0: Time offset (shift)
    - C: Vertical offset (starting value)
    """
    # Added a condition to prevent overflow with large k*(t-t0) values
    safe_exp_arg = -k * (t - t0)
    # Clip the value to avoid np.exp returning inf or 0 incorrectly
    safe_exp_arg = np.clip(safe_exp_arg, -700, 700)
    return A * (1 - np.exp(safe_exp_arg)) + C

def velocity_from_exponential(t, A, k, t0):
    """ The first derivative of the saturating exponential (velocity). """
    safe_exp_arg = -k * (t - t0)
    safe_exp_arg = np.clip(safe_exp_arg, -700, 700)
    return A * k * np.exp(safe_exp_arg)

def acceleration_from_exponential(t, A, k, t0):
    """ The second derivative of the saturating exponential (acceleration). """
    safe_exp_arg = -k * (t - t0)
    safe_exp_arg = np.clip(safe_exp_arg, -700, 700)
    return -A * (k**2) * np.exp(safe_exp_arg)


# --- Main Execution ---
try:
    # --- Configuration ---
    INPUT_FILENAME = 'flame_trajectory_data_FREI.csv'
    OUTPUT_PARAMS_FILENAME = 'flame_exponential_parameters_FREI.csv'

    # 1. Load the raw trajectory dataset
    df = pd.read_csv(INPUT_FILENAME)

    flame_ids = sorted(df['Flame_ID'].unique())
    n_flames = len(flame_ids)
    
    # --- Setup for 3 separate plot figures ---
    n_cols = 4
    n_rows = math.ceil(n_flames / n_cols)
    fig_pos, axes_pos = plt.subplots(n_rows, n_cols, figsize=(20, n_rows * 5), constrained_layout=True)
    axes_pos = axes_pos.flatten()
    fig_vel, axes_vel = plt.subplots(n_rows, n_cols, figsize=(20, n_rows * 5), constrained_layout=True)
    axes_vel = axes_vel.flatten()
    fig_accel, axes_accel = plt.subplots(n_rows, n_cols, figsize=(20, n_rows * 5), constrained_layout=True)
    axes_accel = axes_accel.flatten()

    all_params_data = []

    print("Fitting exponential model for each flame...")
    for i, flame_id in enumerate(flame_ids):
        ax_pos, ax_vel, ax_accel = axes_pos[i], axes_vel[i], axes_accel[i]
        
        flame_data = df[df['Flame_ID'] == flame_id]
        x_data = flame_data['Timestamp_s'].to_numpy()
        y_data = flame_data['Position_CM'].to_numpy()

        # 2. Make more robust, data-driven initial guesses
        guess_C = y_data.min()
        guess_A = y_data.max() - y_data.min()

        # To guess k and t0, find the point of steepest ascent
        if len(x_data) > 1:
            slopes = np.diff(y_data) / np.diff(x_data)
            max_slope_idx = np.argmax(slopes)
            # Guess t0 is where the slope is steepest
            guess_t0 = x_data[max_slope_idx]
            # Estimate k from the maximum slope
            guess_k = max(0.1, slopes[max_slope_idx] / guess_A if guess_A > 0 else 1.0)
        else:
            guess_k, guess_t0 = 1.0, x_data[0] # Fallback for single-point data
        
        initial_guesses = [guess_A, guess_k, guess_t0, guess_C]

        # 2.5 Define parameter bounds to guide the optimizer and prevent failures
        time_range = x_data.max() - x_data.min()
        lower_bounds = [0, 1e-3, x_data.min() - time_range, 0]
        upper_bounds = [guess_A * 2 if guess_A > 0 else 1, 50, x_data.max() + time_range, y_data.max()]
        bounds = (lower_bounds, upper_bounds)

        try:
            # 3. Use scipy.optimize.curve_fit with bounds for a more robust fit
            popt, pcov = curve_fit(
                saturating_exponential,
                x_data,
                y_data,
                p0=initial_guesses,
                bounds=bounds, # Add the bounds to guide the fit
                maxfev=10000
            )
            A, k, t0, C = popt

            param_row = {'Flame_ID': flame_id, 'Amplitude (A)': A, 'Rate (k)': k, 'Time_Offset (t0)': t0, 'Vertical_Offset (C)': C}
            all_params_data.append(param_row)
            
            # --- 4. Plotting ---
            time_smooth = np.linspace(x_data.min(), x_data.max(), 200)

            ax_pos.scatter(x_data, y_data, label='Original Data', s=10, zorder=5, alpha=0.7)
            ax_pos.plot(time_smooth, saturating_exponential(time_smooth, *popt), color='red', label='Exponential Fit')
            ax_pos.set_title(f'Flame {flame_id} Position')
            ax_pos.set_xlabel('Time (s)')
            ax_pos.set_ylabel('Distance (cm)')
            ax_pos.legend()
            ax_pos.grid(True, linestyle='--')

            ax_vel.plot(time_smooth, velocity_from_exponential(time_smooth, A, k, t0), color='black')
            ax_vel.set_title(f'Flame {flame_id} Velocity')
            ax_vel.set_xlabel('Time (s)')
            ax_vel.set_ylabel('Velocity (cm/s)')
            ax_vel.grid(True, linestyle='--')
            
            ax_accel.plot(time_smooth, acceleration_from_exponential(time_smooth, A, k, t0), color='green')
            ax_accel.set_title(f'Flame {flame_id} Acceleration')
            ax_accel.set_xlabel('Time (s)')
            ax_accel.set_ylabel(r'Acceleration (cm/s$^2$)')
            ax_accel.grid(True, linestyle='--')

        except (RuntimeError, ValueError) as e:
            print(f"Could not find a good fit for Flame {flame_id}: {e}")
            ax_pos.text(0.5, 0.5, 'Fit Failed', horizontalalignment='center', verticalalignment='center', transform=ax_pos.transAxes)


    # --- 5. Finalize and Save Plots and Data ---
    print("Finalizing plots and saving files...")
    for i in range(n_flames, len(axes_pos)):
        fig_pos.delaxes(axes_pos[i]); fig_vel.delaxes(axes_vel[i]); fig_accel.delaxes(axes_accel[i])

    fig_pos.suptitle('Flame Position with Exponential Curve Fit', fontsize=16); fig_pos.savefig('plots_position_fit_exponential_FREI.png', dpi=300)
    fig_vel.suptitle('Derived Flame Velocity from Exponential Fit', fontsize=16); fig_vel.savefig('plots_velocity_derived_exponential_FREI.png', dpi=300)
    fig_accel.suptitle('Derived Flame Acceleration from Exponential Fit', fontsize=16); fig_accel.savefig('plots_acceleration_derived_exponential_FREI.png', dpi=300)

    plt.close('all')
    print("\nSuccessfully saved 3 plot files.")
    
    params_df = pd.DataFrame(all_params_data)
    params_df.to_csv(OUTPUT_PARAMS_FILENAME, index=False)
    print(f"\nPhysical parameters saved to: {OUTPUT_PARAMS_FILENAME}")

except FileNotFoundError:
    print(f"Error: The file '{INPUT_FILENAME}' was not found.")
except Exception as e:
    print(f"An error occurred: {e}")

